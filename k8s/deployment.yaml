apiVersion: apps/v1
kind: Deployment
metadata:
  name: book-review-app
  namespace: book-rev-namespace
  labels:
    app.kubernetes.io/name: book-review-app
    app.kubernetes.io/instance: production
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: application
    app.kubernetes.io/part-of: book-review-system
    app.kubernetes.io/managed-by: kubernetes
    environment: production
  annotations:
    description: "Deployment for Book Review Application"
    deployment.kubernetes.io/revision: "1"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: book-review-app
      app.kubernetes.io/instance: production
  template:
    metadata:
      labels:
        app.kubernetes.io/name: book-review-app
        app.kubernetes.io/instance: production
        app.kubernetes.io/version: "1.0.0"
        app.kubernetes.io/component: application
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/actuator/prometheus"
    spec:
      serviceAccountName: book-review-service-account
      automountServiceAccountToken: false
      
      # Simplified Security Context for Pod - for testing
      securityContext:
        fsGroup: 2000
      
      # Pod Anti-Affinity for better distribution
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - book-review-app
              topologyKey: kubernetes.io/hostname
      
      # Topology Spread Constraints
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app.kubernetes.io/name: book-review-app
      
      # Init Container for database initialization
      initContainers:
      - name: init-db
        image: busybox:1.36-uclibc
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        command: ['sh', '-c']
        args:
        - |
          echo "Initializing database directory..."
          mkdir -p /app/data
          chmod 755 /app/data
          echo "Database directory initialized successfully"
        volumeMounts:
        - name: app-data
          mountPath: /app/data
        - name: tmp-volume
          mountPath: /tmp
        resources:
          requests:
            cpu: 50m
            memory: 32Mi
          limits:
            cpu: 100m
            memory: 64Mi
      
      containers:
      - name: book-review-app
        image: openjdk:17-jdk-alpine
        imagePullPolicy: Always
        command: ["sleep", "3600"]
        
        # Simplified security context for testing
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
        
        # Container Ports
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: management
          containerPort: 8080
          protocol: TCP
        
        # Environment Variables from ConfigMap
        envFrom:
        - configMapRef:
            name: book-review-config
        
        # Environment Variables from Secrets
        env:
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: book-review-secrets
              key: db-password
        - name: APP_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: book-review-secrets
              key: app-secret-key
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: book-review-secrets
              key: encryption-key
        
        # Resource Limits and Requests
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
            ephemeral-storage: 256Mi
          limits:
            cpu: 200m
            memory: 256Mi
            ephemeral-storage: 512Mi
        
        # Health checks disabled for test container
        # livenessProbe:
        #   httpGet:
        #     path: /actuator/health/liveness
        #     port: http
        #     scheme: HTTP
        #   initialDelaySeconds: 120
        #   periodSeconds: 30
        #   timeoutSeconds: 10
        #   successThreshold: 1
        #   failureThreshold: 3
        
        # readinessProbe:
        #   httpGet:
        #     path: /actuator/health/readiness
        #     port: http
        #     scheme: HTTP
        #   initialDelaySeconds: 60
        #   periodSeconds: 10
        #   timeoutSeconds: 5
        #   successThreshold: 1
        #   failureThreshold: 3
        
        # startupProbe:
        #   httpGet:
        #     path: /actuator/health
        #     port: http
        #     scheme: HTTP
        #   initialDelaySeconds: 30
        #   periodSeconds: 10
        #   timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 12
        
        # Volume Mounts
        volumeMounts:
        - name: app-data
          mountPath: /app/data
        - name: app-logs
          mountPath: /app/logs
        - name: tmp-volume
          mountPath: /tmp
        - name: app-tmp-volume
          mountPath: /app/tmp
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: cache-volume
          mountPath: /app/cache
      
      # DNS Configuration
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "2"
        - name: edns0
      
      # Restart Policy
      restartPolicy: Always
      
      # Termination Grace Period
      terminationGracePeriodSeconds: 30
      
      # Volumes
      volumes:
      - name: app-data
        persistentVolumeClaim:
          claimName: book-review-data-pvc
      - name: app-logs
        emptyDir:
          sizeLimit: 1Gi
      - name: tmp-volume
        emptyDir:
          sizeLimit: 100Mi
          medium: Memory
      - name: app-tmp-volume
        emptyDir:
          sizeLimit: 50Mi
      - name: config-volume
        configMap:
          name: book-review-app-properties
          defaultMode: 0444
      - name: cache-volume
        emptyDir:
          sizeLimit: 256Mi
---
# Persistent Volume Claim for application data
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: book-review-data-pvc
  namespace: book-rev-namespace
  labels:
    app.kubernetes.io/name: book-review-app
    app.kubernetes.io/component: storage
  annotations:
    description: "Persistent storage for Book Review Application data"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: standard
