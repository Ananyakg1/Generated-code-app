name: Deploy Book Review App to Kubernetes

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      image_tag:
        description: 'Docker image tag to deploy'
        required: false
        default: 'latest'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: book-review-app
  KUBE_NAMESPACE: book-rev-namespace

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build image for scanning
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: ${{ env.IMAGE_NAME }}:scan
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.IMAGE_NAME }}:scan'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Trivy vulnerability scanner (table output)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.IMAGE_NAME }}:scan'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: security-scan
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ steps.meta.outputs.tags }}
        format: spdx-json
        output-file: sbom.spdx.json
    
    - name: Upload SBOM as artifact
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: sbom.spdx.json

  kubernetes-security-scan:
    name: Kubernetes Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Kubesec scan
      run: |
        curl -sSX POST --data-binary @k8s/deployment.yaml https://v2.kubesec.io/scan | jq .
    
    - name: Install Polaris
      run: |
        curl -L https://github.com/FairwindsOps/polaris/releases/latest/download/polaris_linux_amd64.tar.gz | tar -xz
        sudo mv polaris /usr/local/bin/
    
    - name: Run Polaris audit
      run: |
        polaris audit --audit-path k8s/ --format=pretty
    
    - name: Install kube-score
      run: |
        curl -L https://github.com/zegl/kube-score/releases/latest/download/kube-score_linux_amd64.tar.gz | tar -xz
        sudo mv kube-score /usr/local/bin/
    
    - name: Run kube-score
      run: |
        kube-score score k8s/*.yaml

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.event_name == 'pull_request'
    needs: [build-and-push, kubernetes-security-scan]
    environment:
      name: staging
      url: https://staging-book-review.example.com
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN_STAGING }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Install and configure kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.4'
    
    - name: Configure kubectl for EKS
      run: |
        aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME_STAGING }}
    
    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.13.1'
    
    - name: Create namespace if not exists
      run: |
        kubectl create namespace ${{ env.KUBE_NAMESPACE }}-staging --dry-run=client -o yaml | kubectl apply -f -
    
    - name: Deploy to Staging
      run: |
        # Update image tag in deployment
        sed -i "s|java-app:latest|${{ needs.build-and-push.outputs.image-tag }}|g" k8s/deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/secrets.yaml
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/network-policy.yaml
        kubectl apply -f k8s/security-policies.yaml
        kubectl apply -f k8s/monitoring.yaml
        
        # Wait for rollout to complete
        kubectl rollout status deployment/book-review-app -n ${{ env.KUBE_NAMESPACE }}-staging --timeout=600s
    
    - name: Run health checks
      run: |
        # Wait for pods to be ready
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=book-review-app -n ${{ env.KUBE_NAMESPACE }}-staging --timeout=300s
        
        # Port forward and test health endpoint
        kubectl port-forward svc/book-review-app-service 8080:80 -n ${{ env.KUBE_NAMESPACE }}-staging &
        sleep 10
        curl -f http://localhost:8080/actuator/health || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [build-and-push, kubernetes-security-scan]
    environment:
      name: production
      url: https://book-review.example.com
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN_PRODUCTION }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Install and configure kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.4'
    
    - name: Configure kubectl for EKS
      run: |
        aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME_PRODUCTION }}
    
    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.13.1'
    
    - name: Create namespace if not exists
      run: |
        kubectl create namespace ${{ env.KUBE_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
    
    - name: Backup current deployment
      run: |
        kubectl get deployment book-review-app -n ${{ env.KUBE_NAMESPACE }} -o yaml > backup-deployment.yaml || echo "No existing deployment to backup"
    
    - name: Deploy to Production
      run: |
        # Update image tag in deployment
        sed -i "s|java-app:latest|${{ needs.build-and-push.outputs.image-tag }}|g" k8s/deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/secrets.yaml
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/network-policy.yaml
        kubectl apply -f k8s/security-policies.yaml
        kubectl apply -f k8s/monitoring.yaml
        
        # Wait for rollout to complete
        kubectl rollout status deployment/book-review-app -n ${{ env.KUBE_NAMESPACE }} --timeout=600s
    
    - name: Run production health checks
      run: |
        # Wait for pods to be ready
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=book-review-app -n ${{ env.KUBE_NAMESPACE }} --timeout=300s
        
        # Port forward and test health endpoint
        kubectl port-forward svc/book-review-app-service 8080:80 -n ${{ env.KUBE_NAMESPACE }} &
        sleep 10
        curl -f http://localhost:8080/actuator/health || exit 1
        
        # Test main application endpoint
        curl -f http://localhost:8080/ || exit 1
    
    - name: Rollback on failure
      if: failure()
      run: |
        if [ -f backup-deployment.yaml ]; then
          echo "Rolling back to previous deployment..."
          kubectl apply -f backup-deployment.yaml
          kubectl rollout status deployment/book-review-app -n ${{ env.KUBE_NAMESPACE }} --timeout=300s
        else
          echo "No backup found, scaling down deployment..."
          kubectl scale deployment book-review-app --replicas=0 -n ${{ env.KUBE_NAMESPACE }}
        fi
    
    - name: Notify deployment success
      if: success()
      run: |
        echo "Deployment to production completed successfully!"
        kubectl get pods -n ${{ env.KUBE_NAMESPACE }}
        kubectl get services -n ${{ env.KUBE_NAMESPACE }}

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    if: always()
    needs: [deploy-staging, deploy-production]
    
    steps:
    - name: Clean up old images
      run: |
        echo "Cleaning up old container images..."
        # This would typically involve calling container registry APIs
        # to clean up old images based on retention policies
